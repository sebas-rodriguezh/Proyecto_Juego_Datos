# score_manager.py - VERSI√ìN CORREGIDA Y MEJORADA
import json
import os
from datetime import datetime
from typing import List, Dict, Any

class ScoreManager:
    """Gestor de puntajes del juego Courier Quest - VERSI√ìN CORREGIDA"""
    
    def __init__(self, filename="data/puntajes.json"):
        self.filename = filename
        self.scores = []
        self.initialized = False
        self._ensure_data_directory()
    
    def _ensure_data_directory(self):
        """Asegura que el directorio data existe"""
        try:
            os.makedirs("data", exist_ok=True)
            print("‚úÖ Directorio 'data' verificado/creado")
        except Exception as e:
            print(f"‚ùå Error creando directorio data: {e}")
    
    def initialize_score_system(self) -> bool:
        """Inicializa el sistema de puntuaci√≥n - M√âTODO ROBUSTO"""
        try:
            if self.initialized:
                return True
                
            print("üîÑ Inicializando sistema de puntuaci√≥n...")
            
            # Verificar/Crear directorio
            self._ensure_data_directory()
            
            # Verificar/Crear archivo si no existe
            if not os.path.exists(self.filename):
                print("üìÑ Creando nuevo archivo de puntuaciones...")
                self._create_initial_file()
            else:
                print("üìÑ Archivo de puntuaciones encontrado, cargando...")
            
            # Cargar puntuaciones existentes
            self.load_scores()
            
            self.initialized = True
            print(f"‚úÖ Sistema de puntuaci√≥n inicializado. {len(self.scores)} puntuaciones cargadas")
            return True
            
        except Exception as e:
            print(f"‚ùå Error cr√≠tico inicializando sistema de puntuaci√≥n: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def load_scores(self) -> None:
        """Carga los puntajes desde el archivo JSON - VERSI√ìN ROBUSTA"""
        try:
            if not os.path.exists(self.filename):
                self.scores = []
                print("‚ö†Ô∏è Archivo de puntuaciones no existe, usando lista vac√≠a")
                return
            
            with open(self.filename, 'r', encoding='utf-8') as f:
                content = f.read().strip()
            
            if not content:
                self.scores = []
                print("‚ö†Ô∏è Archivo de puntuaciones vac√≠o")
            else:
                self.scores = json.loads(content)
                if not isinstance(self.scores, list):
                    print("‚ö†Ô∏è Formato inv√°lido, reiniciando puntuaciones")
                    self.scores = []
                else:
                    print(f"üìä {len(self.scores)} puntuaciones cargadas correctamente")
                    
        except json.JSONDecodeError as e:
            print(f"‚ùå Error de formato JSON: {e}")
            print("üîÑ Creando nuevo archivo de puntuaciones...")
            self.scores = []
            self._create_initial_file()
        except Exception as e:
            print(f"‚ùå Error cargando puntuaciones: {e}")
            self.scores = []
    
    def _create_initial_file(self):
        """Crea el archivo inicial con array vac√≠o"""
        try:
            with open(self.filename, 'w', encoding='utf-8') as f:
                json.dump([], f, indent=2, ensure_ascii=False)
            print("üìÑ Archivo de puntuaciones inicial creado exitosamente")
        except Exception as e:
            print(f"‚ùå Error creando archivo de puntuaciones: {e}")
    
    def save_scores(self) -> bool:
        """Guarda los puntajes en el archivo JSON"""
        try:
            if not self.initialized:
                print("‚ö†Ô∏è Sistema no inicializado, inicializando...")
                self.initialize_score_system()
            
            self._ensure_data_directory()
            
            with open(self.filename, 'w', encoding='utf-8') as f:
                json.dump(self.scores, f, indent=2, ensure_ascii=False)
            
            print(f"üíæ {len(self.scores)} puntuaciones guardadas correctamente")
            return True
            
        except Exception as e:
            print(f"‚ùå Error guardando puntuaciones: {e}")
            return False
    
    def add_score(self, game_state, victory: bool, game_duration: float, total_game_duration: float = 900, player_name: str = "Jugador") -> bool:
        """A√±ade un nuevo puntaje desde GameState - VERSI√ìN FUNCIONAL"""
        try:
            print(f"üéØ Iniciando guardado de puntuaci√≥n...")
            
            # 1. Verificar inicializaci√≥n del sistema
            if not self.initialized:
                print("üîÑ Sistema no inicializado, inicializando...")
                if not self.initialize_score_system():
                    print("‚ùå No se pudo inicializar el sistema de puntuaci√≥n")
                    return False
            
            # 2. Validaciones del estado del juego
            if not game_state:
                print("‚ùå game_state es None")
                return False
                
            if not hasattr(game_state, 'game_over'):
                print("‚ùå game_state no tiene atributo game_over")
                return False
                
            if not game_state.game_over:
                print("‚ùå El juego no ha terminado, no se puede guardar puntuaci√≥n")
                return False
            
            # 3. Verificar referencia al jugador
            if not hasattr(game_state, 'player') or game_state.player is None:
                print("‚ùå No hay referencia al jugador en game_state")
                return False
            
            # 4. Calcular puntaje final
            final_score = game_state.calculate_final_score(game_duration, total_game_duration)
            print(f"üìä Puntaje calculado: {final_score}")
            
            # 5. Crear entrada de puntuaci√≥n
            score_entry = {
                "player_name": player_name,
                "score": int(final_score),
                "earnings": int(game_state.total_earnings),
                "orders_completed": int(game_state.orders_completed),
                "orders_cancelled": int(game_state.orders_cancelled),
                "perfect_deliveries": int(game_state.perfect_deliveries),
                "late_deliveries": int(game_state.late_deliveries),
                "best_streak": int(game_state.best_streak),
                "victory": victory,
                "date": datetime.now().isoformat(),
                "game_duration": float(game_duration),
                "final_reputation": int(game_state.player.reputation)
            }
            
            # 6. A√±adir y ordenar puntuaciones
            self.scores.append(score_entry)
            self.sort_scores()
            
            # 7. Mantener solo los top 10 puntajes
            if len(self.scores) > 10:
                self.scores = self.scores[:10]
            
            # 8. Guardar en archivo
            success = self.save_scores()
            
            if success:
                position = self.get_ranking_position(final_score)
                print(f"üèÜ Puntuaci√≥n a√±adida exitosamente. Posici√≥n: {position}")
            else:
                print("‚ùå Error al guardar puntuaciones en archivo")
            
            return success
            
        except Exception as e:
            print(f"‚ùå Error cr√≠tico al a√±adir puntaje: {e}")
            import traceback
            traceback.print_exc()
            return False
    
    def sort_scores(self) -> None:
        """Ordena los puntajes de mayor a menor"""
        self.scores.sort(key=lambda x: x.get("score", 0), reverse=True)
    
    def get_top_scores(self, limit: int = 10) -> List[Dict[str, Any]]:
        """Obtiene los mejores puntajes"""
        if not self.initialized:
            print("üîÑ Sistema no inicializado al obtener puntuaciones")
            self.initialize_score_system()
        
        return self.scores[:limit]
    
    def get_score_count(self) -> int:
        """Retorna la cantidad de puntajes guardados"""
        if not self.initialized:
            return 0
        return len(self.scores)
    
    def get_ranking_position(self, score: int) -> int:
        """Obtiene la posici√≥n en el ranking para un puntaje dado"""
        if not self.initialized or not self.scores:
            return 1
            
        for i, entry in enumerate(self.scores):
            if score >= entry.get("score", 0):
                return i + 1
        return len(self.scores) + 1
    
    def debug_info(self):
        """Informaci√≥n de depuraci√≥n"""
        return {
            "initialized": self.initialized,
            "filename": self.filename,
            "file_exists": os.path.exists(self.filename),
            "scores_count": len(self.scores),
            "top_scores": self.get_top_scores(3)
        }

# Instancia global
score_manager = ScoreManager()

# Funci√≥n de inicializaci√≥n independiente
def initialize_score_system():
    """Funci√≥n para inicializar el sistema de puntajes"""
    try:
        print("üéØ Inicializando sistema de puntuaci√≥n global...")
        success = score_manager.initialize_score_system()
        
        if success:
            print("‚úÖ Sistema de puntuaci√≥n global inicializado exitosamente")
        else:
            print("‚ùå Fall√≥ la inicializaci√≥n del sistema de puntuaci√≥n global")
            
        return success
    except Exception as e:
        print(f"‚ùå Error cr√≠tico inicializando sistema de puntuaciones global: {e}")
        return False